using System;

class UnionFind
{
    private int[] parent;
    private int[] rank;

    public UnionFind(int size)
    {
        parent = new int[size + 1];
        rank = new int[size + 1];
        for (int i = 1; i <= size; i++)
        {
            parent[i] = i;
            rank[i] = 0;
        }
    }

    public int Find(int x)
    {
        if (parent[x] != x)
            parent[x] = Find(parent[x]);
        return parent[x];
    }

    public void Union(int x, int y)
    {
        int xRoot = Find(x);
        int yRoot = Find(y);

        if (xRoot == yRoot)
            return;

        if (rank[xRoot] < rank[yRoot])
            parent[xRoot] = yRoot;
        else if (rank[xRoot] > rank[yRoot])
            parent[yRoot] = xRoot;
        else
        {
            parent[yRoot] = xRoot;
            rank[xRoot]++;
        }
    }
}

class Program
{
    static void Main()
    {
        string[] firstLine = Console.ReadLine().Split();
        int n = int.Parse(firstLine[0]);
        int e = int.Parse(firstLine[1]);
        int d = int.Parse(firstLine[2]);

        UnionFind uf = new UnionFind(n);

        // Обработка равенств
        for (int i = 0; i < e; i++)
        {
            string[] line = Console.ReadLine().Split();
            int x = int.Parse(line[0]);
            int y = int.Parse(line[1]);
            uf.Union(x, y);
        }

        bool possible = true;

        // Обработка неравенств
        for (int i = 0; i < d; i++)
        {
            string[] line = Console.ReadLine().Split();
            int x = int.Parse(line[0]);
            int y = int.Parse(line[1]);
            if (uf.Find(x) == uf.Find(y))
            {
                possible = false;
                break;
            }
        }

        Console.WriteLine(possible ? 1 : 0);
    }
}
using System;
using System.Collections.Generic;
using System.Text;

class TreeNode
{
    public int Key { get; set; }
    public int Left { get; set; }
    public int Right { get; set; }
}

class Program
{
    static void Main()
    {
        int n = int.Parse(Console.ReadLine());
        TreeNode[] tree = new TreeNode[n];
        
        for (int i = 0; i < n; i++)
        {
            string[] parts = Console.ReadLine().Split();
            tree[i] = new TreeNode
            {
                Key = int.Parse(parts[0]),
                Left = int.Parse(parts[1]),
                Right = int.Parse(parts[2])
            };
        }

        var inOrder = new List<int>();
        var preOrder = new List<int>();
        var postOrder = new List<int>();

        TraverseInOrder(0, tree, inOrder);
        TraversePreOrder(0, tree, preOrder);
        TraversePostOrder(0, tree, postOrder);

        Console.WriteLine(string.Join(" ", inOrder));
        Console.WriteLine(string.Join(" ", preOrder));
        Console.WriteLine(string.Join(" ", postOrder));
    }

    static void TraverseInOrder(int nodeIndex, TreeNode[] tree, List<int> result)
    {
        if (nodeIndex == -1) return;
        
        TraverseInOrder(tree[nodeIndex].Left, tree, result);
        result.Add(tree[nodeIndex].Key);
        TraverseInOrder(tree[nodeIndex].Right, tree, result);
    }

    static void TraversePreOrder(int nodeIndex, TreeNode[] tree, List<int> result)
    {
        if (nodeIndex == -1) return;
        
        result.Add(tree[nodeIndex].Key);
        TraversePreOrder(tree[nodeIndex].Left, tree, result);
        TraversePreOrder(tree[nodeIndex].Right, tree, result);
    }

    static void TraversePostOrder(int nodeIndex, TreeNode[] tree, List<int> result)
    {
        if (nodeIndex == -1) return;
        
        TraversePostOrder(tree[nodeIndex].Left, tree, result);
        TraversePostOrder(tree[nodeIndex].Right, tree, result);
        result.Add(tree[nodeIndex].Key);
    }
}
using System;
using System.Collections.Generic;

class Processor : IComparable<Processor>
{
    public int Id { get; set; }
    public long AvailableTime { get; set; }

    public int CompareTo(Processor other)
    {
        if (AvailableTime != other.AvailableTime)
            return AvailableTime.CompareTo(other.AvailableTime);
        return Id.CompareTo(other.Id);
    }
}

class Program
{
    static void Main()
    {
        string[] firstLine = Console.ReadLine().Split();
        int n = int.Parse(firstLine[0]);
        int m = int.Parse(firstLine[1]);

        long[] tasks = Array.ConvertAll(Console.ReadLine().Split(), long.Parse);

        PriorityQueue<Processor> queue = new PriorityQueue<Processor>();
        for (int i = 0; i < n; i++)
        {
            queue.Enqueue(new Processor { Id = i, AvailableTime = 0 });
        }

        for (int i = 0; i < m; i++)
        {
            Processor current = queue.Dequeue();
            Console.WriteLine($"{current.Id} {current.AvailableTime}");
            current.AvailableTime += tasks[i];
            queue.Enqueue(current);
        }
    }
}

// Simple priority queue implementation for the task
public class PriorityQueue<T> where T : IComparable<T>
{
    private List<T> data;

    public PriorityQueue()
    {
        this.data = new List<T>();
    }

    public void Enqueue(T item)
    {
        data.Add(item);
        int ci = data.Count - 1;
        while (ci > 0)
        {
            int pi = (ci - 1) / 2;
            if (data[ci].CompareTo(data[pi]) >= 0)
                break;
            T tmp = data[ci];
            data[ci] = data[pi];
            data[pi] = tmp;
            ci = pi;
        }
    }

    public T Dequeue()
    {
        int li = data.Count - 1;
        T frontItem = data[0];
        data[0] = data[li];
        data.RemoveAt(li);

        --li;
        int pi = 0;
        while (true)
        {
            int ci = pi * 2 + 1;
            if (ci > li) break;
            int rc = ci + 1;
            if (rc <= li && data[rc].CompareTo(data[ci]) < 0)
                ci = rc;
            if (data[pi].CompareTo(data[ci]) <= 0) break;
            T tmp = data[pi];
            data[pi] = data[ci];
            data[ci] = tmp;
            pi = ci;
        }
        return frontItem;
    }

    public int Count
    {
        get { return data.Count; }
    }
}